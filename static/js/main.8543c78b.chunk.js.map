{"version":3,"sources":["types/helperType.ts","components/TodoContext/TodoProvider.tsx","components/TodoListItem/TodoListItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helper.ts","index.tsx"],"names":["FilterType","TodoContext","createContext","selectedTodo","setSelectedTodo","TodoProvider","children","useState","Provider","value","Button","isButtonActive","handleClick","className","type","onClick","classNames","TodoListItem","todo","useContext","id","title","completed","TodoList","memo","todos","map","TodoFilter","setFilterType","applyQuery","setIsLoading","searchQuery","setSearchQuery","onChange","event","target","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","json","Error","TodoModal","isLoading","selectedUser","setSelectedUser","useEffect","userId","user","catch","finally","href","email","name","App","initialTodoState","setÐ†nitialTodoState","filterType","applyedQuery","setApplyedQuery","todosData","useCallback","func","deley","timerId","clearTimeout","args","debonce","useMemo","data","sortType","filter","FilterReducer","query","includes","filterTodosByTitle","length","ReactDOM","render","document","getElementById"],"mappings":"sMAAYA,E,yECQCC,EAAcC,wBAAuB,CAChDC,aAAc,KACdC,gBAFgD,eASrCC,EAA0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxC,EAAwCC,mBAAsB,MAA9D,mBAAOJ,EAAP,KAAqBC,EAArB,KAEA,OACE,cAACH,EAAYO,SAAb,CAAsBC,MAAO,CAAEN,eAAcC,mBAA7C,SACGE,KCTDI,EAAuB,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,YAAnB,OAC3B,wBACE,UAAQ,eACRC,UAAU,SACVC,KAAK,SACLC,QAASH,EAJX,SAME,sBAAMC,UAAU,OAAhB,SACE,mBAAGA,UAAWG,IAAW,aAAc,CACrC,eAAgBL,EAChB,UAAWA,WAWNM,EAA0B,SAAC,GAEjC,IADLC,EACI,EADJA,KAEA,EAA0CC,qBAAWlB,GAA7CE,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAGdgB,EAAyBF,EAAzBE,GAAIC,EAAqBH,EAArBG,MAAOC,EAAcJ,EAAdI,UAMbX,GAA6B,OAAZR,QAAY,IAAZA,OAAA,EAAAA,EAAciB,MAAOA,EAE5C,OACE,qBACE,UAAQ,OACRP,UAAU,GAFZ,UAIE,oBAAIA,UAAU,eAAd,SAA8BO,IAC9B,6BACGE,GACC,sBAAMT,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWG,IAAW,CACvB,mBAAoBM,EACpB,mBAAoBA,IAFtB,SAKGD,MAGL,oBAAIR,UAAU,8BAAd,SACE,cAAC,EAAD,CAAQF,eAAgBA,EAAgBC,YA9B1B,WAClBR,EAAgBc,YClCPK,EAAsBC,gBAAK,gBAAGC,EAAH,EAAGA,MAAH,OACtC,wBAAOZ,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGY,EAAMC,KAAI,SAACR,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,GADDA,EAAKE,gB,SH3BRpB,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KISL,IAAM2B,EAAwB,SAAC,GAI/B,IAHLC,EAGI,EAHJA,cACAC,EAEI,EAFJA,WACAC,EACI,EADJA,aAEA,EAAsCvB,mBAAiB,IAAvD,mBAAOwB,EAAP,KAAoBC,EAApB,KAiBA,OACE,uBAAMnB,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRoB,SArBe,SAACC,GACxBN,EAAcM,EAAMC,OAAO1B,QAkBrB,UAIE,wBAAQA,MAAOT,EAAWoC,IAA1B,iBACA,wBAAQ3B,MAAOT,EAAWqC,OAA1B,oBACA,wBAAQ5B,MAAOT,EAAWsC,UAA1B,8BAKN,oBAAGzB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRC,KAAK,OACLD,UAAU,QACV0B,YAAY,YACZ9B,MAAOsB,EACPE,SAjCkB,SAACC,GACzBJ,GAAa,GACbE,EAAeE,EAAMC,OAAO1B,OAC5BoB,EAAWK,EAAMC,OAAO1B,UAgCpB,sBAAMI,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAEdkB,GACC,sBAAMlB,UAAU,gBAAgB2B,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACR3B,KAAK,SACLD,UAAU,SACVE,QAvCa,WACvBiB,EAAe,IACfH,EAAW,gBCzBFa,G,MAAmB,kBAC9B,qBAAK7B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSnB,SAAS8B,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GACJ,GAAIA,EAAIC,GACN,OAAOD,EAAIE,OAGb,MAAMC,MAAM,YAIX,ICZMC,EAAgB,WAC3B,MAAkCjD,oBAAkB,GAApD,mBAAOkD,EAAP,KAAkB3B,EAAlB,KACA,EAAwCvB,mBAAsB,MAA9D,mBAAOmD,EAAP,KAAqBC,EAArB,KACA,EAA0CxC,qBAAWlB,GAA7CE,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAEtBwD,qBAAU,WDSW,IAACC,ECRhB1D,IDQgB0D,ECPV1D,EAAa0D,ODOgBlB,EAAG,iBAAiBkB,KCNtDX,MAAK,SAAAY,GAAI,OAAIH,EAAgBG,MAC7BC,QACAC,SAAQ,kBAAMlC,GAAa,QAE/B,IAQH,OACE,sBAAKjB,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEd4C,EACC,cAAC,EAAD,IAEA,sBAAK5C,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYV,QAJZ,IAIYA,OAJZ,EAIYA,EAAciB,MAI1B,wBACEN,KAAK,SACLD,UAAU,SACV,UAAQ,cACRE,QA3BO,WACjBX,EAAgB,MAChBuD,EAAgB,MAChB7B,GAAa,SA4BP,sBAAKjB,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGV,QADH,IACGA,OADH,EACGA,EAAckB,QAGjB,oBAAGR,UAAU,QAAQ,UAAQ,aAA7B,UAEE,wBAAQA,UAAWG,IAAW,CAC5B,oBAAmB,OAACb,QAAD,IAACA,KAAcmB,WAClC,0BAAoBnB,QAApB,IAAoBA,OAApB,EAAoBA,EAAcmB,YAFpC,SAKe,OAAZnB,QAAY,IAAZA,KAAcmB,UAAY,OAAS,YAGrC,OAED,mBAAG2C,KAAI,wBAAYP,QAAZ,IAAYA,OAAZ,EAAYA,EAAcQ,OAAjC,gBACGR,QADH,IACGA,OADH,EACGA,EAAcS,oBC3DxB,IAAMC,EAAgB,WAC3B,MAAgD7D,mBAAiB,IAAjE,mBAAO8D,EAAP,KAAyBC,EAAzB,KACA,EAAoC/D,mBAAqBP,EAAWoC,KAApE,mBAAOmC,EAAP,KAAmB3C,EAAnB,KACA,EAAkCrB,oBAAkB,GAApD,mBAAOkD,EAAP,KAAkB3B,EAAlB,KACA,EAAwCvB,mBAAiB,IAAzD,mBAAOiE,EAAP,KAAqBC,EAArB,KACQtE,EAAiBgB,qBAAWlB,GAA5BE,aAERyD,qBAAU,WFCkBjB,EAAY,UECnCO,MAAK,SAAAwB,GACJJ,EAAoBI,MAErBV,SAAQ,kBAAMlC,GAAa,QAC7B,IAEH,IAAMD,EAAa8C,sBCjBd,SAAoBC,EAA0BC,GACnD,IAAIC,EAEJ,OAAO,WACLC,aAAaD,GADU,2BAAdE,EAAc,yBAAdA,EAAc,gBAEvBF,EAAU7B,WAAU,WAAV,GAAW2B,EAAMC,GAAjB,OAA2BG,KDYRC,CAAgBR,EAAiB,KAAM,IAEhEhD,EAAQyD,mBAAQ,WACpB,IAAMC,ECrCmB,SAAC1D,EAAe2D,GAC3C,OAAQA,GACN,KAAKpF,EAAWqC,OACd,OAAOZ,EAAM4D,QAAO,SAAAnE,GAAI,OAAKA,EAAKI,aACpC,KAAKtB,EAAWsC,UACd,OAAOb,EAAM4D,QAAO,SAAAnE,GAAI,OAAIA,EAAKI,aACnC,KAAKtB,EAAWoC,IACd,OAAOX,EACT,QACE,MAAM8B,MAAM,kBD4BD+B,CAAcjB,EAAkBE,GAI7C,OAFAzC,GAAa,GAEN0C,EC5BuB,SAAC/C,EAAe8D,GAAhB,OAChC9D,EAAM4D,QAAO,SAAAnE,GAAI,OAAIA,EAAKG,MAAMmE,SAASD,MD2BjBE,CAAmBN,EAAMX,GAAgBW,IAC9D,CAACZ,EAAYF,EAAkBG,IAElC,OACE,qCACE,qBAAK3D,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEe,cAAeA,EACfC,WAAYA,EACZC,aAAcA,MAIlB,qBAAKjB,UAAU,QAAf,SAEG4C,EACG,cAAC,EAAD,IACiB,IAAjBhC,EAAMiE,OACJ,cAACnE,EAAD,CAAUE,MAAOA,IACjB,qDAMbtB,GACC,cAAC,EAAD,QEvERwF,IAASC,OACP,cAAC,EAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8543c78b.chunk.js","sourcesContent":["export enum FilterType {\n  ALL = 'ALL',\n  ACTIVE = 'ACTIVE',\n  COMPLETED = 'COMPLETED',\n}\n","import { createContext, FC, useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Context {\n  selectedTodo: Todo | null;\n  setSelectedTodo:(value: Todo | null) => void;\n}\n\nexport const TodoContext = createContext<Context>({\n  selectedTodo: null,\n  setSelectedTodo() {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const TodoProvider: FC<Props> = ({ children }) => {\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  return (\n    <TodoContext.Provider value={{ selectedTodo, setSelectedTodo }}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n","import {\n  FC,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoContext } from '../TodoContext/TodoProvider';\n\ntype BtnProps = {\n  isButtonActive: boolean;\n  handleClick: () => void;\n};\n\nconst Button: FC<BtnProps> = ({ isButtonActive, handleClick }) => (\n  <button\n    data-cy=\"selectButton\"\n    className=\"button\"\n    type=\"button\"\n    onClick={handleClick}\n  >\n    <span className=\"icon\">\n      <i className={classNames('far fa-eye', {\n        'fa-eye-slash': isButtonActive,\n        'fa-eye': !isButtonActive,\n      })}\n      />\n    </span>\n  </button>\n);\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoListItem: FC<Props> = ({\n  todo,\n}) => {\n  const { selectedTodo, setSelectedTodo } = useContext(TodoContext);\n  // const [isButtonActive, setIsButtonActive] = useState(false);\n\n  const { id, title, completed } = todo;\n\n  const handleClick = () => {\n    setSelectedTodo(todo);\n  };\n\n  const isButtonActive = selectedTodo?.id === id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className=\"\"\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td>\n        {completed && (\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-danger': !completed,\n          'has-text-success': completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <Button isButtonActive={isButtonActive} handleClick={handleClick} />\n      </td>\n    </tr>\n  );\n};\n","import { FC, memo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoListItem } from '../TodoListItem';\n\ntype Props = {\n  todos: Todo[];\n  // setSelectedTodo:(value:Todo) => void;\n};\n\nexport const TodoList: FC<Props> = memo(({ todos }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => (\n        <TodoListItem\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </tbody>\n  </table>\n));\n","import { FC, ChangeEvent, useState } from 'react';\nimport { FilterType } from '../../types/helperType';\n\ntype Props = {\n  setFilterType: (type: FilterType) => void;\n  applyQuery: (value: string) => void;\n  setIsLoading: (value: boolean) => void;\n};\n\nexport const TodoFilter: FC<Props> = ({\n  setFilterType,\n  applyQuery,\n  setIsLoading,\n}) => {\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const handleFilterType = (event: ChangeEvent<HTMLSelectElement>): void => {\n    setFilterType(event.target.value as FilterType);\n  };\n\n  const handleSearchQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    setIsLoading(true);\n    setSearchQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const clearSearchQuary = () => {\n    setSearchQuery('');\n    applyQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleFilterType}\n          >\n            <option value={FilterType.ALL}>All</option>\n            <option value={FilterType.ACTIVE}>Active</option>\n            <option value={FilterType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={handleSearchQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearSearchQuary}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw Error('Error');\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import {\n  useState,\n  FC,\n  useEffect,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\n// import { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { TodoContext } from '../TodoContext/TodoProvider';\n\n// type Props = {\n//   selectedTodo:Todo;\n//   setSelectedTodo:(value:Todo | null) => void;\n// };\n\nexport const TodoModal: FC = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const { selectedTodo, setSelectedTodo } = useContext(TodoContext);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(user => setSelectedUser(user))\n        .catch()\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  const closeModal = () => {\n    setSelectedTodo(null);\n    setSelectedUser(null);\n    setIsLoading(true);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={classNames({\n                'has-text-danger': !selectedTodo?.completed,\n                'has-text-success': selectedTodo?.completed,\n              })}\n              >\n                {selectedTodo?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser?.email}`}>\n                {selectedUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-nested-ternary */\nimport React, {\n  useEffect,\n  useMemo,\n  useCallback,\n  useState,\n  useContext,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/helperType';\nimport { TodoModal } from './components/TodoModal';\nimport { FilterReducer, debonce, filterTodosByTitle } from './helper';\nimport { TodoContext } from './components/TodoContext/TodoProvider';\n\nexport const App: React.FC = () => {\n  const [initialTodoState, setÐ†nitialTodoState] = useState<Todo[]>([]);\n  const [filterType, setFilterType] = useState<FilterType>(FilterType.ALL);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [applyedQuery, setApplyedQuery] = useState<string>('');\n  const { selectedTodo } = useContext(TodoContext);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosData => {\n        setÐ†nitialTodoState(todosData);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const applyQuery = useCallback(debonce<string>(setApplyedQuery, 500), []);\n\n  const todos = useMemo(() => {\n    const data = FilterReducer(initialTodoState, filterType);\n\n    setIsLoading(false);\n\n    return applyedQuery ? filterTodosByTitle(data, applyedQuery) : data;\n  }, [filterType, initialTodoState, applyedQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setFilterType={setFilterType}\n                applyQuery={applyQuery}\n                setIsLoading={setIsLoading}\n              />\n            </div>\n\n            <div className=\"block\">\n\n              {isLoading\n                ? <Loader />\n                : todos.length !== 0\n                  ? <TodoList todos={todos} />\n                  : <h2>No results</h2>}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { FilterType } from './types/helperType';\n\nexport const FilterReducer = (todos: Todo[], sortType: FilterType): Todo[] => {\n  switch (sortType) {\n    case FilterType.ACTIVE:\n      return todos.filter(todo => !todo.completed);\n    case FilterType.COMPLETED:\n      return todos.filter(todo => todo.completed);\n    case FilterType.ALL:\n      return todos;\n    default:\n      throw Error('Reducer Error');\n  }\n};\n\nexport const filterTodosByTitle = (todos: Todo[], query: string) => (\n  todos.filter(todo => todo.title.includes(query))\n);\n\nexport function debonce<T>(func: (value: T) => void, deley: number) {\n  let timerId: NodeJS.Timeout;\n\n  return (...args: [T]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(func, deley, ...args);\n  };\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { TodoProvider } from './components/TodoContext/TodoProvider';\n\nReactDOM.render(\n  <TodoProvider>\n    <App />\n  </TodoProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}